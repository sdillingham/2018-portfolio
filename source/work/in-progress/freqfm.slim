---
order: 1
title: "freq.fm"
teaser: "A podcast app that connects the world's best audio storytellers with curious and engaged listeners."
---

article.single-project.freqfm
  section.project-marquee
    .marquee-overlay
    .bound
      header.marquee-header
        h1.project-title freq.fm
        p.project-description A podcast app that connects the world’s best audio storytellers with curious and engaged listeners.
        dl.project-responsibilities
          dt Responsibilities: 
          dd Product strategy, Product design 
  .project-details
    / PROJECT INTRODUCTION
    section.narrative.introduction
      .bound
        p I’ve been fascinated by podcasting’s steady ascendence into the mainstream, and excited by it as an alternative to the public radio’s legacy business model. I love podcasts, but like anyone who listens to them, I’ve been frustrated by parts of the experience.
        p Podcast discovery and management feels like too much work. There are too many podcasts, poor metadata, no trusted editors or friends to send signals about where the best podcasts are. It’s too hard to discover new things or know where to spend your time.
        p I thought it would be fun to imagine what a better podcast service might look like. I want an app that curates a large, vibrant and elite library of content for the “public radio” listener - the people who view the world with curiousity and care. I believe there’s an opportunity to capitalize on the exploding market for podcasts, allow listeners to connect with their favorite shows in more meaningful ways, and unlock new business models for supporting great audio content.
        p I’ve been working in my spare time to explore different product design and UI concepts, having fun designing the podcast app of my dreams. But this is more than just an exercise in UI design. It’s borne out of a belief that podcasting will upend traditional public radio listening habits, and that there’s an opportunity to build a product to serve the next generation of listeners. The result is an app design concept I’m calling <b>freq.fm</b>.
        
        hr.divider
    .sheet.chapter-sheet
      .bound
        h3.sheet-heading Structure and UI
        p.supportive Once I created an elevator pitch for my app and brainstormed some outcomes, I worked on designing an app structure that would support different modes of podcast discovery and keep a clear separation between content selection, exploration, management and playback. 
        p.supportive The Home tab gives users a quick list of new episodes from the shows they’re following, as well as a feed of the shows your friends and favorite show hosts are listening to. The Discover tab makes finding new content fun with editor’s picks, quick 30-second clips of great shows you’ve never listened to before, and a list of the episodes that are trending across the network. Power users can create playlists and sync audio for offline listening in the Manage tab.
      .intermission.device.screens
        .slider-navigation
        .bound
          .marvel-device.iphone6.silver
            .top-bar
            .sleep
            .volume
            .camera
            .sensor
            .speaker
            .screen
              /! iPhone screenshots
              .slider
                div
                  img.asset data-lazy="../../../images/freqfm/screens/screen-home.png" title="Home screen"
                div
                  img.asset data-lazy="../../../images/freqfm/screens/screen-following.png" title="People and shows you follow"
                div
                  img.asset data-lazy="../../../images/freqfm/screens/screen-discover.png" title="Curated picks"
                div
                  img.asset data-lazy="../../../images/freqfm/screens/screen-manage.png"  title="Downloads"
                div
                  img.asset data-lazy="../../../images/freqfm/screens/screen-audio-player.png"  title="Audio Player"
            .home
            .bottom-bar
          .screen-captions
            h3.brief Home screen
    .sheet.chapter-sheet
      .bound
        h3.sheet-heading It’s all about the shows
        p.supportive Individual shows get first-class treatment, moving beyond podcast cover art to spotlight the personalities behind your favorite shows. “Following” a show doesn’t just mean you get their latest episodes; it also means you see what the producers and hosts of that show are listening to, get notified when they’re coming to your town, and are able to support a show’s fundraising efforts, all directly within the app.
      img.img-full-canvas src="../../../images/freqfm/bg-show-detail2.jpg" alt=""
    .sheet.chapter-sheet
      .bound
        h3.sheet-heading Visual Identity
        p.supportive While I don’t consider myself an identity designer, part of the fun of working on this passion project was getting to name it and imagine how its branding would position it as <em>the</em> app that young public radio podcast fans will want to use. 
        img.img-centered src="../../../images/freqfm/appicon-freqfm.png" alt="freq.fm app icon"
        img.img-centered src="../../../images/freqfm/logo-freqfm-dark.png" alt="freq.fm"
        p.supportive Once I had a name that referenced traditional radio as well as a forward-looking take on audio listening, I started exploring logotypes and colors that would embody both the qualities of the app, as well as the identity of a young public radio podcast fan. Pairing a bright color pallette with the clean lines of Gotham Light, I landed on a wordmark and app icon that feel fresh and contemporary, but that also gesture toward simplicity and refinement.
    .narrative.chapter-narrative
      .intermission.wireframes.neutral
        .sheet.chapter-sheet
          .bound
            h3.sheet-heading In-app Crowdfunding
            p.supportive It’s is a great time to be an aspiring radio storyteller. Great shows are connecting with tribes of people who are willing to listen to and support them. freq.fm would be the first podcasting app to give producers tools to make crowdfunding appeals actionable and frictionless. 
        .bound
          .slider
            div
              ol.flow.three-steps
                li.flow-item
                  span.flow-arrow
                  figure
                    img data-lazy="../../../images/freqfm/screens/screen-player.png"
                    figcaption
                      span.brief Episode player 
                li.flow-item
                  span.flow-arrow
                  figure
                    img data-lazy="../../../images/freqfm/screens/screen-crowdfunding-appeal.png"
                    figcaption
                      span.brief In-app crowdfunding appeal
                li.flow-item
                  span.flow-arrow
                  figure
                    img data-lazy="../../../images/freqfm/screens/screen-applepay.png"
                    figcaption
                      span.brief Apple Pay
    .narrative.chapter-narrative 
      .bound
        p My goal with freq.fm is to create a service that makes discovering and listening to podcasts fun and accessible, eliminating podcast busy work so users can enjoy an experience as simple and delightful as listening to a great public radio station. I want to create an app that will be a badge of identity, connecting a likeminded tribe of the best audio storytellers and the most curious and intelligent listeners.
        p Now that I have key features, flows and structure nailed down, my next step is to start prototyping microinteractions and transitions using Framer.js. I'd also like to experiment with how the iOS app design concepts could translate to other platforms - the web, Android and Watch OS.
        hr.divider

- content_for :additional_footer do

    javascript:
      $(document).ready(function() {
        //
        // Set up Waypoints for lazy loading content
        // 
        var waypoints = $(".chapter-introduction, .slider").waypoint({
          handler: function(direction) {
            $(this.element).addClass("viewable");

            //
            // Slick.js for image galleries
            //
            $('.wireframes .slider.viewable').slick({
              appendArrows:   ".wireframes .slider-navigation",
              dots:           true,
              lazyLoad:       "ondemand",
              nextArrow:      '<button type="button" class="slick-next"><span class="next-arrow"></span></button>',
              prevArrow:      '<button type="button" class="slick-prev"><span class="prev-arrow"></span></button>'
            });
            $('.screens .slider.viewable').slick({
              appendArrows:   ".screens .slider-navigation",
              dots:           true,
              lazyLoad:       "ondemand",
              nextArrow:      '<button type="button" class="slick-next"><span class="next-arrow"></span></button>',
              prevArrow:      '<button type="button" class="slick-prev"><span class="prev-arrow"></span></button>'
            });

            $('.screens .slider').on('afterChange', function(event, slick, currentSlide, nextSlide){
              screenCaption = $('.screens .slick-active .asset').attr("title");
              $('.screens .screen-captions .brief').text(screenCaption);
            });
            $('.prototypes .slider.viewable').slick({
              appendArrows:   ".prototypes .slider-navigation",
              dots:           true,
              nextArrow:      '<button type="button" class="slick-next"><span class="next-arrow"></span></button>',
              prevArrow:      '<button type="button" class="slick-prev"><span class="prev-arrow"></span></button>'
            });

            $('.prototypes .slider').on('afterChange', function(event, slick, currentSlide, nextSlide){
              // set our vars
              currentVideo  = $('.prototypes .slick-active .asset').get(0);
              screenCaption = $('.prototypes .slick-active .asset').attr("title");
              pBar = document.getElementById('video-progress');
              
              // pause all playing videos
              $('.prototypes .asset').each(function() {
                  $(this).get(0).pause();
              });

              // start playing the current video from the beginning
              currentVideo.currentTime = 0;
              currentVideo.play();

              // bind progress bar to current video 
              currentVideo.addEventListener('timeupdate', function() {
                var percent = Math.floor((100 / currentVideo.duration) * currentVideo.currentTime);
                pBar.value = percent;
              });

              // set our caption for the current video
              $('.prototypes .screen-captions .brief').text(screenCaption);
            });
          },
          offset: "150%"
        })

        //
        // Set up Waypoint for animating in video overlay
        // 
        var videoWaypoint = $(".prototyping .prototypes").waypoint({
          handler: function(direction) {
            $(".video-overlay").addClass("active");
          },
          offset: 200
        })

        //
        // Set up Waypoints for CSS transitions on UI controls
        // 
        var sliderNavWaypoints = $(".slider-navigation").waypoint({
          handler: function(direction) {
            $(this.element).addClass("active initial");
          },
          offset: 200,
          triggerOnce: true
        })

        //
        // Basic video controls just to get started
        //
        $('.video-overlay').hover(
          function(){ $(this).addClass('active') },
          function(){ $(this).removeClass('active dismiss') }
        )
        $('.video-overlay').click(function() {
          if ($('.slick-active video').get(0).paused) {
            $('.slick-active video').get(0).play();
            $(this).removeClass("active initial");
            $(this).addClass("dismiss");
            $(".video-control-label").removeClass("play");
            $(".video-control-label").addClass("pause");

            currentVideo  = $('.prototypes .slick-active .asset').get(0);
            pBar = document.getElementById('video-progress');
            // bind progress bar to current video 
            currentVideo.addEventListener('timeupdate', function() {
              var percent = Math.floor((100 / currentVideo.duration) * currentVideo.currentTime);
              pBar.value = percent;
            });
          }
          else {
            $('.slick-active video').get(0).pause();
            $(".video-control-label").removeClass("pause");
            $(".video-control-label").addClass("play");
          }
        });        
      });
